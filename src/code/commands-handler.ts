import { TextMessage } from "./interfaces"
import { Telegram } from "telegraf"
import { weatherAPI } from "./weather-api"
import { commands } from "./commands"
import { settings } from "./settings"
import { logs } from "./logs"
import { geocodeAPI } from "./geocode-api"

class CommandsHandler {
  constructor () {}

  private sendStartMessage = async (chatId: number, methods: Telegram): Promise<void> => {
    const startText = "–ü—Ä–∏–≤–µ—Ç! üëã\n–Ø –ø—Ä–∏—à–ª—é —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É ‚õÖÔ∏è,\n–∞ —Ç–∞–∫–∂–µ –ø–æ–º–æ–≥—É —Ç–µ–±–µ –æ–¥–µ—Ç—å—Å—è –ø–æ –ø–æ–≥–æ–¥–µ! üß•"
    
    await methods.sendMessage(chatId, startText).catch(() => {})
  }

  private sendCurrentWeatherMessage = async (chatId: number, methods: Telegram): Promise<void> => {
    if (!settings.currentSettings[chatId]) return

    const cityName = settings.currentSettings[chatId].city
    const cityGeocode = await geocodeAPI.getCityGeocode(cityName)
    const weatherData = await weatherAPI.getCurrentWeather(cityGeocode.latitude, cityGeocode.longitude)

    let weatherText = `–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç, –≤ –≥–æ—Ä–æ–¥–µ "${cityName}":\nüå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: ${weatherData.temperature}¬∞C\nüí® –°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: ${weatherData.windspeed} –∫–º/—á\n‚òÅÔ∏è –ü–æ–≥–æ–¥–∞: ${weatherData.weathername}`

    if (weatherData.windspeed === 0 &&
        weatherData.weathercode === 0 &&
        weatherData.temperature === 0) {
          weatherText = `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ üò¨\n–ì–æ—Ä–æ–¥ "${cityName}" –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω.`
    }


    await methods.sendMessage(chatId, weatherText).catch(() => {})
  }

  private sendCorrectCityUseMessage = async (chatId: number, methods: Telegram): Promise<void> => {
    const correctCityUseText = "–ö–æ–º–∞–Ω–¥–∞ /city –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–∞–∫: /city –Ω–∞–∑–≤–∞–Ω–∏–µ_–≥–æ—Ä–æ–¥–∞\n–ì–¥–µ –Ω–∞–∑–≤–∞–Ω–∏–µ_–≥–æ—Ä–æ–¥–∞ —è–≤–ª—è–µ—Ç—Å—è –Ω–∞–∑–≤–∞–Ω–∏–µ–º –≥–æ—Ä–æ–¥–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ.\n–ù–∞–ø—Ä–∏–º–µ—Ä: /city –ö–µ–º–µ—Ä–æ–≤–æ"
    
    await methods.sendMessage(chatId, correctCityUseText).catch(() => {})
  }

  private sendSuccessTextMessage = async (chatId: number, firstName: string, methods: Telegram): Promise<void> => {
    const successText = firstName + ", –≥–æ—Ä–æ–¥ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!"
    
    await methods.sendMessage(chatId, successText).catch(() => {})
  }

  private setCity = (chatId: number, firstArgument: string): void => {
    const cityName = firstArgument

    settings.setParameter(chatId, "city", cityName)
    settings.updateSettingsFile()
  }

  public handle = async (message: TextMessage, methods: Telegram): Promise<void> => {
    const command = message.text
    const chatId = message.chat.id
    const firstName = message.from.first_name

    if (!settings.isChatExists(chatId)) {
      settings.initializeChatSettings(chatId)
      logs.write("Initialized chat with id: " + chatId)
    }

    if (!commands.has(command)) return

    if (commands.equal(command, "start")) {
      await this.sendStartMessage(chatId, methods)
    }

    if (commands.equal(command, "weather")) {
      await this.sendCurrentWeatherMessage(chatId, methods)
    }

    if (commands.equal(command, "city")) {
      const firstArgument = commands.getArguments(command)[0]
      const isCorrectCity = (typeof firstArgument === "string") && /([–ê-–Ø–∞-—èA-Za-z]+)/.test(firstArgument)

      if (!isCorrectCity) {
        await this.sendCorrectCityUseMessage(chatId, methods)
      } else {
        this.setCity(chatId, firstArgument)
        await this.sendSuccessTextMessage(chatId, firstName, methods)
        await this.sendCurrentWeatherMessage(chatId, methods)
        logs.write(`${message.from.id} set city to ${firstArgument} in ${chatId} chat`)
      }
    }

    logs.write(`${message.from.id} sent command: ${commands.getCommand(command)}`)
  }
}

export const commandsHandler = new CommandsHandler()